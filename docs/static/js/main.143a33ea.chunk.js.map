{"version":3,"sources":["biglia.js","app.js","index.js"],"names":["Biglia","$group","useRef","$ball","$petals","$shadow","$material","useTexture","textureShadow","textureMap","isAnimating","colors","ballMaterial","useMemo","clearcoat","clearcoatRoughness","metalness","roughness","normalMap","normalScale","RepeatWrapping","transmission","transparent","petalMaterial","color","onBeforeCompile","shader","uniforms","uTime","value","uFactor","vertexShader","replace","current","userData","gl","useThree","useEffect","style","background","Object","assign","domElement","bounce","gsap","to","position","y","duration","ease","onComplete","rotation","z","Math","PI","material","opacity","Sphere","attach","args","side","BackSide","renderOrder","onPointerDown","Petals","ref","receiveShadow","castShadow","Lights","intensity","shadow-mapSize-width","shadow-mapSize-height","Shadow","map","useFrame","clock","getElapsedTime","App","shadowMap","camera","fov","OrbitControls","enableDamping","dampingFactor","enableZoom","fallback","Environment","preset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.143a33ea.chunk.js","sourcesContent":["import gsap from 'gsap'\nimport { useRef, useEffect, useMemo } from \"react\"\nimport { BackSide, RepeatWrapping } from \"three\"\nimport { useFrame, useThree } from \"react-three-fiber\"\nimport { useTexture } from \"@react-three/drei\"\n\nexport default function Biglia() {\n  const $group = useRef()\n  const $ball = useRef()\n  const $petals = useRef()\n  const $shadow = useRef()\n  const $material = useRef()\n  const [textureShadow, textureMap] = useTexture([\"https://supahfunk.github.io/biglia/shadow.png\", \"https://supahfunk.github.io/biglia/texture.jpg\"])\n  let isAnimating = false\n\n  const colors = {\n    bg1: 'rgb(132 56 202)',\n    bg2: 'rgb(17 9 43)',\n    ball1: 'blue',\n    ball2: '#f37ae9',\n    petal1: '#5000c8',\n    petal2: '#cf0058',\n    petal3: '#ffc6c6',\n    factor: 3\n  }\n\n  const ballMaterial = useMemo(() => ({\n    clearcoat: 0.1,\n    clearcoatRoughness: 0.1,\n    metalness: 0.2,\n    roughness: 0.09,\n    normalMap: textureMap,\n    normalScale: [.02, .02],\n    \"normalMap-wrapS\": RepeatWrapping,\n    \"normalMap-wrapT\": RepeatWrapping,\n    \"normalMap-repeat\": [1, 1],\n    \"normalMap-anisotropy\": 16,\n    transmission: .9,\n    transparent: true,\n  }), [])\n\n  const petalMaterial = useMemo(() => {\n    return ({\n    clearcoat: 1.0,\n    clearcoatRoughness: 1,\n    metalness: 0.2,\n    roughness: 0.5,\n    color: \"white\",\n    normalMap: textureMap,\n    transmission: 0,\n    normalScale: [0.1, 0.1],\n    \"normalMap-wrapS\": RepeatWrapping,\n    \"normalMap-wrapT\": RepeatWrapping,\n    \"normalMap-repeat\": [4, 1],\n    \"normalMap-anisotropy\": 16,\n    transparent: true,\n    onBeforeCompile(shader) {\n      shader.uniforms.uTime = { value: 0 }\n      shader.uniforms.uFactor = { value: colors.factor }\n      shader.vertexShader = `\n        uniform float uTime;\n        uniform float uFactor;\n        varying vec3 vPosition;\n        ${shader.vertexShader}\n      `;\n      shader.vertexShader = shader.vertexShader.replace(\n        \"#include <begin_vertex>\",\n        /*glsl*/`\n          float theta = sin( uTime + position.y ) / 2.0 * uFactor;\n          float c = cos( theta );\n          float s = sin( theta );\n          mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );\n          mat3 m2 = mat3(\n            cos(position.y), 0., 0.,\n            0., 1.6, 0.,\n            0., 0., cos(position.y * PI) * 1.\n          );\n          vec3 transformed = vec3( position ) * m2 * m;\n          vNormal = vNormal * m2 * m;\n          vPosition = transformed;\n        `\n      );\n      $material.current.userData.shader = shader\n    },\n  })}, [])\n\n  const { gl } = useThree()\n\n  useEffect(() => {\n    const style = { background: `radial-gradient(${colors.bg1}, ${colors.bg2})` }\n    Object.assign(gl.domElement.style, style)\n  }, [])\n\n  const bounce = () => {\n    if (isAnimating) return\n    isAnimating = true\n    gsap.to($ball.current.position, {\n      y: .5,\n      duration: .5,\n      ease: 'power3.out',\n      onComplete: () => {\n        gsap.to($ball.current.position, {\n          y: 0,\n          duration: 1,\n          ease: \"bounce.out\",\n        })\n      }\n    })\n    gsap.to($ball.current.rotation, {\n      z: `+=${Math.PI}`,\n      duration: 1.5,\n      ease: 'power3.out',\n      onComplete: () => {\n        isAnimating = false\n      }\n    })\n    gsap.to($shadow.current.material, {\n      opacity: .1,\n      duration: .6,\n      ease: 'power3.out',\n      onComplete: () => {\n        gsap.to($shadow.current.material, {\n          opacity: .75,\n          duration: 1,\n          ease: \"bounce.out\",\n        })\n      }\n    })\n  }\n\n  const Sphere = () => (\n    <group>\n      <mesh>\n        <icosahedronBufferGeometry attach=\"geometry\" args={[.8, 18]} />\n        <meshPhysicalMaterial {...ballMaterial} side={BackSide} color={colors.ball1} transmission={.9} />\n      </mesh>\n      <mesh renderOrder={100} onPointerDown={bounce}>\n        <icosahedronBufferGeometry attach=\"geometry\" args={[.8, 18]} />\n        <meshPhysicalMaterial\n          {...ballMaterial}\n          color={colors.ball2}\n        />\n      </mesh>\n    </group>\n  )\n\n  const Petals = () => (\n    <group ref={$petals} >\n      <mesh rotation={[0, 0, 0]} receiveShadow castShadow>\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[.02, 1, 1, 200, 200, 200]}\n        />\n        <meshStandardMaterial \n          ref={$material}\n          {...petalMaterial}\n          color={colors.petal1}\n        />\n      </mesh>\n      <mesh rotation={[0, Math.PI * 0.333, 0]} receiveShadow castShadow>\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[0.02, .98, 1, 200, 200, 200]}\n        />\n        <meshStandardMaterial \n          ref={$material}\n          {...petalMaterial}\n          color={colors.petal2}\n        />\n      </mesh>\n      <mesh rotation={[0, Math.PI * -0.333, 0]} receiveShadow castShadow>\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[.03, .99, 1, 200, 200, 200]}\n        />\n        <meshStandardMaterial \n          {...petalMaterial}\n          color={colors.petal3}\n        />\n      </mesh>\n    </group>\n  )\n\n  const Lights = () => (\n    <>\n      <spotLight\n        intensity={0.4}\n        position={[-20, 20, 10]}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        color=\"white\"\n        castShadow\n      />\n      <pointLight position={[.01, -.8, 0]} intensity={2} />\n    </>\n  )\n\n  const Shadow = () => (\n    <mesh ref={$shadow} position={[0, -.8, 0]} rotation={[-Math.PI * .5, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[2, 2]}  />\n      <meshStandardMaterial attach=\"material\" map={textureShadow} transparent={true} color=\"#000000\" opacity={.75} />\n    </mesh>\n  )\n\n  useFrame(({clock}) => {\n    $group.current.rotation.y = clock.getElapsedTime()\n  })\n\n  return (\n    <>\n      <group ref={$group}>\n        <group ref={$ball}>\n          <Sphere />\n          <Petals />\n        </group>\n        <Shadow />\n      </group>\n       <Lights />\n    </>\n  )\n}","import { Suspense } from 'react'\nimport { Canvas } from \"react-three-fiber\"\nimport { OrbitControls, Environment } from '@react-three/drei'\nimport Biglia from './biglia'\n\nexport default function App() {\n  const camera = { position: [5, 0.1, 0], fov: 50 }\n  return (\n    <Canvas shadowMap camera={camera}>\n       <OrbitControls\n        enableDamping\n        dampingFactor={0.06}\n        enableZoom={false}\n      />\n      <Suspense fallback={null}>\n        <Environment preset=\"city\" />\n        <Biglia />\n      </Suspense>\n    </Canvas>\n  )\n}","import ReactDOM from 'react-dom'\nimport App from './app'\nimport './style.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}